{"version":3,"sources":["moment-thai-solar.js"],"names":["global","factory","module","exports","require","define","amd","moment","window","this","thai","toThai","gYear","month","day","year","toGregorian","tYear","utils","calYear","isValidDate","monthLength","isLeapYear","gy","isLeapThaiYear","thaiCal","leap","formattingTokens","localFormattingTokens","parseTokenOneOrTwoDigits","parseTokenOneToThreeDigits","parseTokenThreeDigits","parseTokenFourDigits","parseTokenSixDigits","parseTokenWord","parseTokenTimezone","parseTokenT","parseTokenTimestampMs","formatFunctions","formatTokenFunctions","xkY","thaiYear","extend","a","b","key","hasOwnProperty","setDate","m","date","d","_d","_isUTC","Date","UTC","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","objectCreate","parent","F","prototype","makeFormatFunction","format","i","array","match","length","forEach","element","index","mom","output","Function","call","getParseRegexForToken","token","config","localeData","lang","_meridiemParse","RegExp","replace","addTimeToArrayFromToken","input","_thaiYear","_isValid","yearFromConfig","makeDateFromStringAndFormat","tokens","string","_a","parsedInput","exec","slice","indexOf","_thai_leftLength","makeDateFromStringAndArray","utc","makeMoment","NaN","moments","map","currentScore","tempMoment","strict","isValid","score","sort","m1","m2","removeParsedTokens","parsed","orgFormat","undefined","origInput","origFormat","Array","isArray","orgMoment","newMoment","thaiMoment","fn","unix","me","longDateFormat","test","lastDay","gregorian","Math","min","thaiDaysInMonth","updateOffset","clone","div","mod","thaiIsLeapYear","thaiConvert","gm","gd","jy","jm","jd"],"mappings":"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","file":"moment-thai-solar.min.js","sourcesContent":["/*!\n * moment-thai-solar\n * https://github.com/yociduo/moment-thai-solar#readme\n * Version: 0.0.1 - 2017-06-09T14:10:06.972Z\n * License: MIT\n */\n\n\n(function (global, factory) {\r\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        // CMD\r\n        module.exports = factory(require('moment'));\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as parrot\r\n        // TODO how to define the jquery plugin here?\r\n        define(['moment'], factory);\r\n    } else {\r\n        // in browser, assump moment is loaded\r\n        global.moment = factory(moment);\r\n    }\r\n}(typeof window !== \"undefined\" ? window : this, function (moment) {\r\n    // utils\r\n    var thai = {\r\n        /*\r\n         Converts a Gregorian date to Thai.\r\n         */\r\n        toThai: function (gYear, month, day) {\r\n            return {\r\n                year: gYear + 543,\r\n                month: month,\r\n                day: day\r\n            };\r\n        },\r\n        /*\r\n         Converts a Thai date to Gregorian.\r\n         */\r\n        toGregorian: function (tYear, month, day) {\r\n            return {\r\n                year: utils.calYear(tYear),\r\n                month: month,\r\n                day: day\r\n            };\r\n        },\r\n        /**\r\n         * Checks whether a Thai date is valid or not.\r\n         */\r\n        isValidDate: function (tYear, month, day) {\r\n            return month >= 1 && month <= 12 &&\r\n                day >= 1 && day <= utils.monthLength(tYear, month);\r\n        },\r\n        /**\r\n         * check the Gregorian year is leap or not\r\n         * @param gy\r\n         * @returns {boolean}\r\n         */\r\n        isLeapYear: function isLeapYear(gy) {\r\n            return ((gy % 4 == 0) && (gy % 100 != 0)) || (gy % 400 == 0);\r\n        },\r\n        /**\r\n         * Is this a leap year or not?\r\n         * @returns {boolean}\r\n         */\r\n        isLeapThaiYear: function isLeapThaiYear(tYear) {\r\n            return utils.thaiCal(tYear).leap;\r\n        },\r\n        /**\r\n         * Number of days in a given month in a Thai year.\r\n         * @returns {number} days of month\r\n         */\r\n        monthLength: function (tYear, month) {\r\n            switch (month) {\r\n                case 4:\r\n                case 6:\r\n                case 9:\r\n                case 11:\r\n                    return 30;\r\n                case 2:\r\n                    return utils.isLeapYear(utils.calYear(tYear)) ? 29 : 28;\r\n                default:\r\n                    return 31;\r\n            }\r\n        },\r\n        /**\r\n         *\r\n         * @param tYear thai year\r\n         * @returns {{leap: boolean, gy: number}}\r\n         */\r\n        thaiCal: function thaiCal(tYear) {\r\n            var gy = calYear(tYear);\r\n            return {\r\n                leap: isLeapYear(gy),\r\n                gy: gy\r\n            };\r\n        },\r\n        /**\r\n         * calculate the Thai year to Gregorian year\r\n         * @param tYear\r\n         * @returns {number}\r\n         */\r\n        calYear: function calYear(tYear) {\r\n            return tYear - 543;\r\n        }\r\n    };\r\n\r\n    /************************************\r\n     Constants\r\n     ************************************/\r\n    var formattingTokens = /xkY|YY(YY)?|Q|MM?|MMMM?|DD?|Do|DDDD?|X|x|gg(gg)?|ww?|e|dddd?|GG(GG)?|WW?|E|HH?|hh?|a|A|mm?|ss?|SS?S?S?|ZZ?|./g;\r\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\r\n\r\n        parseTokenOneOrTwoDigits = /\\d\\d?/,\r\n        parseTokenOneToThreeDigits = /\\d{1,3}/,\r\n        parseTokenThreeDigits = /\\d{3}/,\r\n        parseTokenFourDigits = /\\d{1,4}/,\r\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/,\r\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\r\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i,\r\n        parseTokenT = /T/i,\r\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/,\r\n\r\n        formatFunctions = {},\r\n        formatTokenFunctions = {\r\n            xkY: function () {\r\n                return this.thaiYear() + '';\r\n            }\r\n        };\r\n\r\n    /************************************\r\n     Helpers\r\n     ************************************/\r\n    var extend = function (a, b) {\r\n        var key;\r\n        for (key in b) {\r\n            if (b.hasOwnProperty(key)) {\r\n                a[key] = b[key];\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    var setDate = function (m, year, month, date) {\r\n        var d = m._d;\r\n        if (m._isUTC) {\r\n            /*eslint-disable new-cap*/\r\n            m._d = new Date(Date.UTC(year, month, date,\r\n                d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()));\r\n            /*eslint-enable new-cap*/\r\n        } else {\r\n            m._d = new Date(year, month, date,\r\n                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\r\n        }\r\n    };\r\n\r\n    var objectCreate = function (parent) {\r\n        function F() {}\r\n\r\n        F.prototype = parent;\r\n        return new F();\r\n    };\r\n\r\n    /************************************\r\n     Formatting\r\n     ************************************/\r\n    var makeFormatFunction = function (format) {\r\n        var array = format.match(formattingTokens);\r\n        var length = array.length;\r\n        var i;\r\n\r\n        array.forEach(function (element, index) {\r\n            if (formatTokenFunctions[element]) {\r\n                array[index] = formatTokenFunctions[element];\r\n            }\r\n        });\r\n\r\n        return function (mom) {\r\n            var output = '';\r\n            for (i = 0; i < length; i += 1) {\r\n                output += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i];\r\n            }\r\n            return output;\r\n        };\r\n    };\r\n\r\n    /************************************\r\n     Parsing\r\n     ************************************/\r\n    /**\r\n     * get parse regex for token\r\n     * @param token\r\n     * @param config\r\n     * @returns {*}\r\n     */\r\n    var getParseRegexForToken = function (token, config) {\r\n        switch (token) {\r\n            case 'xkY':\r\n                return parseTokenFourDigits;\r\n            case 'DDDD':\r\n                return parseTokenThreeDigits;\r\n            case 'YYYY':\r\n                return parseTokenFourDigits;\r\n            case 'YYYYY':\r\n                return parseTokenSixDigits;\r\n            case 'S':\r\n            case 'SS':\r\n            case 'SSS':\r\n            case 'DDD':\r\n                return parseTokenOneToThreeDigits;\r\n            case 'MMM':\r\n            case 'MMMM':\r\n            case 'dd':\r\n            case 'ddd':\r\n            case 'dddd':\r\n                return parseTokenWord;\r\n            case 'a':\r\n            case 'A':\r\n                return moment.localeData(config.lang)._meridiemParse;\r\n            case 'X':\r\n                return parseTokenTimestampMs;\r\n            case 'Z':\r\n            case 'ZZ':\r\n                return parseTokenTimezone;\r\n            case 'T':\r\n                return parseTokenT;\r\n            case 'MM':\r\n            case 'DD':\r\n            case 'YY':\r\n            case 'HH':\r\n            case 'hh':\r\n            case 'mm':\r\n            case 'ss':\r\n            case 'M':\r\n            case 'D':\r\n            case 'd':\r\n            case 'H':\r\n            case 'h':\r\n            case 'm':\r\n            case 's':\r\n                return parseTokenOneOrTwoDigits;\r\n            default:\r\n                return new RegExp(token.replace('\\\\', ''));\r\n        }\r\n    };\r\n\r\n    var addTimeToArrayFromToken = function (token, input, config) {\r\n        switch (token) {\r\n            case 'xkY':\r\n                config._thaiYear = ~~input;\r\n                break;\r\n        }\r\n        if (input == null) {\r\n            config._isValid = false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * get thai year from config\r\n     * @param config\r\n     * @returns {*}\r\n     */\r\n    var yearFromConfig = function (config) {\r\n        return config._thaiYear;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param config\r\n     * @returns {[]}\r\n     */\r\n    var makeDateFromStringAndFormat = function (config) {\r\n        var tokens = config.format.match(formattingTokens);\r\n        var string = config.input + '';\r\n\r\n        config._a = [];\r\n\r\n        tokens.forEach(function (token) {\r\n            var parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\r\n            if (parsedInput) {\r\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\r\n            }\r\n            if (formatTokenFunctions[token]) {\r\n                addTimeToArrayFromToken(token, parsedInput, config);\r\n            }\r\n        });\r\n        if (string) {\r\n            config._thai_leftLength = string;\r\n        }\r\n        return yearFromConfig(config);\r\n    };\r\n\r\n    /**\r\n     * create moment by given configuration with multiple formats.\r\n     * score of moment is left length of formatting. return moment object with minimum score.\r\n     * @param config\r\n     * @param utc\r\n     * @returns {*}\r\n     */\r\n    var makeDateFromStringAndArray = function (config, utc) {\r\n        if (config.format.length === 0) {\r\n            return makeMoment(new Date(NaN));\r\n        }\r\n\r\n        var moments = config.format.map(function (format) {\r\n            var currentScore = 0;\r\n            var tempMoment = makeMoment(config.input, format, config.lang, config.strict, utc);\r\n            if (tempMoment.isValid()) {\r\n                if (tempMoment._thai_leftLength) {\r\n                    currentScore += tempMoment._thai_leftLength.length;\r\n                }\r\n            }\r\n            return {\r\n                score: currentScore,\r\n                moment: tempMoment\r\n            };\r\n        });\r\n        moments.sort(function (m1, m2) {\r\n            return m1.score - m2.score;\r\n        });\r\n        return moments[0].moment;\r\n    };\r\n\r\n    var removeParsedTokens = function (config) {\r\n        var string = config.input + '';\r\n        var input = '';\r\n        var format = '';\r\n        var array = config.format.match(formattingTokens);\r\n\r\n        array.forEach(function (match) {\r\n            var parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];\r\n            if (parsed) {\r\n                string = string.slice(string.indexOf(parsed) + parsed.length);\r\n            }\r\n            if (!(formatTokenFunctions[match] instanceof Function)) {\r\n                format += match;\r\n                if (parsed) {\r\n                    input += parsed;\r\n                }\r\n            }\r\n        });\r\n        config.input = input;\r\n        var orgFormat = config.format;\r\n        config.format = format;\r\n        return orgFormat != format;\r\n    };\r\n\r\n    /************************************\r\n     Top Level Functions\r\n     ************************************/\r\n    var makeMoment = function (input, format, lang, strict, utc) {\r\n        if (typeof lang === 'boolean') {\r\n            utc = strict;\r\n            strict = lang;\r\n            lang = undefined;\r\n        }\r\n        var config = {\r\n            input: input,\r\n            format: format,\r\n            lang: lang,\r\n            strict: strict,\r\n            utc: utc\r\n        };\r\n        var origInput = input;\r\n        var origFormat = format;\r\n\r\n\r\n        if (format) {\r\n            if (Array.isArray(format)) {\r\n                // create moment by given multiple formats\r\n                return makeDateFromStringAndArray(config, utc);\r\n            } else {\r\n                // create moment by given single format\r\n                var year = makeDateFromStringAndFormat(config);\r\n                var removed = removeParsedTokens(config);\r\n                if (removed) {\r\n                    format = 'YYYY-' + config.format;\r\n                    // has thai format\r\n                    if (typeof year === 'undefined') {\r\n                        // no year parsed, let it be invalid\r\n                        input = 'ABCD-' + config.input;\r\n                    } else {\r\n                        input = thai.calYear(year) + '-' + config.input;\r\n                    }\r\n                } else {\r\n                    // keep original\r\n                    format = origFormat;\r\n                    input = origInput;\r\n                }\r\n                // format = 'YYYY-' + config.format;\r\n                // input = thai.calYear(year) + '-' + config.input;\r\n            }\r\n        }\r\n\r\n        var orgMoment;\r\n        if (utc)\r\n            orgMoment = moment.utc(input, format, lang, strict);\r\n        else\r\n            orgMoment = moment(input, format, lang, strict);\r\n        if (config._isValid === false) {\r\n            orgMoment._isValid = false;\r\n        }\r\n        var newMoment = objectCreate(thaiMoment.fn);\r\n        extend(newMoment, orgMoment);\r\n        if (strict && newMoment.isValid()) {\r\n            newMoment._isValid = newMoment.format(origFormat) === origInput;\r\n        }\r\n        return newMoment;\r\n    };\r\n\r\n    var thaiMoment = function (input, format, lang, strict) {\r\n        return makeMoment(input, format, lang, strict, false);\r\n    };\r\n\r\n    extend(thaiMoment, moment);\r\n    thaiMoment.fn = objectCreate(moment.fn);\r\n\r\n    thaiMoment.utc = function (input, format, lang, strict) {\r\n        return makeMoment(input, format, lang, strict, true);\r\n    };\r\n\r\n    thaiMoment.unix = function (input) {\r\n        return makeMoment(input * 1000);\r\n    };\r\n\r\n    /************************************\r\n     thaiMoment Prototype\r\n     ************************************/\r\n\r\n    thaiMoment.fn.format = function (format) {\r\n        var i, replace, me = this;\r\n        if (format) {\r\n            i = 5;\r\n            replace = function (input) {\r\n                return me.localeData().longDateFormat(input) || input;\r\n            };\r\n            while (i > 0 && localFormattingTokens.test(format)) {\r\n                i -= 1;\r\n                format = format.replace(localFormattingTokens, replace);\r\n            }\r\n            if (!formatFunctions[format]) {\r\n                formatFunctions[format] = makeFormatFunction(format);\r\n            }\r\n            format = formatFunctions[format](this);\r\n        }\r\n        return moment.fn.format.call(this, format);\r\n    };\r\n\r\n    thaiMoment.fn.thaiYear = function (input) {\r\n        var lastDay, thai, gregorian;\r\n        if (typeof input === 'number') {\r\n            thai = toThai(this.year(), this.month(), this.date());\r\n            lastDay = Math.min(thai.year, thaiMoment.thaiDaysInMonth(input, thai.month));\r\n            gregorian = toGregorian(input, thai.month, lastDay);\r\n            setDate(this, gregorian.year, gregorian.month, gregorian.day);\r\n            moment.updateOffset(this);\r\n            return this;\r\n        } else {\r\n            return toThai(this.year(), this.month(), this.date()).year;\r\n        }\r\n    };\r\n\r\n    thaiMoment.fn.clone = function () {\r\n        return thaiMoment(this);\r\n    };\r\n\r\n    /************************************\r\n     thaiMoment Statics\r\n     ************************************/\r\n    thaiMoment.thaiDaysInMonth = function (year, month) {\r\n        year += div(month, 12);\r\n        month = mod(month, 12);\r\n        if (month < 0) {\r\n            month += 12;\r\n            year -= 1;\r\n        }\r\n        return thai.monthLength(year, month);\r\n    };\r\n\r\n    thaiMoment.thaiIsLeapYear = thai.isLeapYear;\r\n\r\n    thaiMoment.thaiConvert = {\r\n        toThai: toThai,\r\n        toGregorian: toGregorian\r\n    };\r\n\r\n    /************************************\r\n     Thai Conversion\r\n     ************************************/\r\n    var toThai = function (gy, gm, gd) {\r\n        var date = thai.toThai(gy, gm + 1, gd);\r\n        date.month -= 1;\r\n        return date;\r\n    };\r\n\r\n    var toGregorian = function (jy, jm, jd) {\r\n        var date = thai.toGregorian(jy, jm + 1, jd);\r\n        date.month -= 1;\r\n        return date;\r\n    };\r\n\r\n    /*\r\n     Utility helper functions.\r\n     */\r\n\r\n    var div = function (a, b) {\r\n        return ~~(a / b);\r\n    };\r\n\r\n    var mod = function (a, b) {\r\n        return a - ~~(a / b) * b;\r\n    };\r\n\r\n    return thaiMoment;\r\n}));"]}